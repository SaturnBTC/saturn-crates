---
source: crates/saturn-account-macros/src/codegen/orchestrator.rs
assertion_line: 154
expression: compact
---
impl < 'info > saturn_account_parser :: Accounts < 'info > for Accs < 'info > { fn try_accounts (accounts : & 'info [arch_program :: account :: AccountInfo < 'info >] ,) -> Result < Self , arch_program :: program_error :: ProgramError > { let mut idx : usize = 0 ; let acc_info_tmp = { saturn_account_parser :: get_account (accounts , idx , Some (true) , None , None ,) ? } ; idx += 1 ; let user = saturn_account_parser :: codec :: BorshAccount :: < u64 > :: load (acc_info_tmp) ? ; let len_val : usize = (2 as usize) ; if len_val > 0xFFFF { return Err (arch_program :: program_error :: ProgramError :: InvalidAccountData) ; } let slice_start = idx ; let slice_end = idx + len_val ; if accounts . len () < slice_end { return Err (arch_program :: program_error :: ProgramError :: NotEnoughAccountKeys) ; } for i in 0 .. len_val { saturn_account_parser :: get_account (accounts , slice_start + i , None , None , None ,) ? ; } let mut vec_tmp : Vec < arch_program :: account :: AccountInfo < 'info > > = Vec :: with_capacity (len_val) ; for i in 0 .. len_val { vec_tmp . push ((* accounts [slice_start + i]) . clone ()) ; } idx = slice_end ; let pdas = vec_tmp ; if idx != accounts . len () { return Err (arch_program :: program_error :: ProgramError :: InvalidAccountData) ; } Ok (Self { user , pdas , .. core :: default :: Default :: default () }) } }
